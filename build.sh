#!/usr/bin/env bash

set -ueo pipefail

declare -r build_script="$0"
declare -r build_root="$PWD"
declare -r tool="tool"
declare -r tool_wrapper="${tool}w"
declare -r tool_wrapper_up="${tool_wrapper}-up.sh"
declare -r tool_config_dir=".${tool}"
declare -r tool_wrapper_config="${tool_config_dir}/wrapper/${tool}-wrapper.properties"

cd "$(dirname "$0")"

check_ends_with_newline() {
  for f in "$@"; do
    if ! tail -1 "$f" | read -r _; then
      echo "$f does not end with newline"
      return 1
    fi
  done
}

generate_wrapper_up_script() {
  # generate up script via template with imported files as content
  cat <<__UP_SCRIPT__
#!/usr/bin/env bash

# generated by "$build_script"

set -ueo pipefail

main() {
  if [[ -f "$tool_wrapper" ]]; then
    echo "$tool_wrapper : already exists"
  else
    echo "$tool_wrapper : creating"
    generate_wrapper > "$tool_wrapper"
    chmod +x "$tool_wrapper"
  fi
  if [[ -f "$tool_wrapper_config" ]]; then
    echo "$tool_wrapper_config : already exists"
  else
    echo "$tool_wrapper_config : creating"
    mkdir -p "$(dirname "$tool_wrapper_config")"
    generate_wrapper_config > "$tool_wrapper_config"
  fi
}

generate_wrapper() {
  cat <<'__WRAPPER__'
__UP_SCRIPT__
  cat <"$tool_wrapper"
  cat <<__UP_SCRIPT__
__WRAPPER__
}

generate_wrapper_config() {
  cat <<'__WRAPPER_CONFIG__'
__UP_SCRIPT__
  cat <"$tool_wrapper_config"
  cat <<__UP_SCRIPT__
__WRAPPER_CONFIG__
}

main
__UP_SCRIPT__
}

run_tests() {
  export TOOL_USER_HOME="$build_root/target/tool_user_home"
  tool_wrapper_repo_dir="target/$tool_wrapper-repo"
  wrapper_repo_url="file://$build_root/$tool_wrapper_repo_dir"
  tool_repo_dir="target/$tool-repo"
  tool_repo_url="file://$build_root/$tool_repo_dir"

  # clean
  rm -rf target

  # create repo for wrapper
  mkdir -p "$tool_wrapper_repo_dir"
  cp -v "$tool_wrapper_up" "$tool_wrapper_repo_dir"

  mkdir -p target/project
  up_url="$wrapper_repo_url/$tool_wrapper_up"
  (
    cd target/project
    # install wrapper into test project
    curl "$up_url" | bash
    # assert
    assert [ -x "$tool_wrapper" ]
    diff -q "$build_root/$tool_wrapper" "$tool_wrapper"
    diff -q "$build_root/$tool_wrapper_config" "$tool_wrapper_config"
  )

  (
    # point repo url in config to test repo
    cd target/project
    cp "$tool_wrapper_config" "$tool_wrapper_config.orig"
    sed -e "s|https://example.repo/location|$tool_repo_url|g" <"$tool_wrapper_config.orig" >"$tool_wrapper_config"
  )

  mkdir -p "$tool_repo_dir"
  (
    # create dummy tool archive in tool-repo
    version=$(extract_version "$tool_wrapper_config")
    cd "$tool_repo_dir"
    mkdir -p "$tool-$version/bin"
    cat <<__TOOL__ >"$tool-$version/bin/$tool"
#!/usr/bin/env bash
echo "hello from $tool:" "\$@"
__TOOL__
    mkdir -p "$version"
    zip -r -q "$version/tool.zip" "$tool-$version"
    rm -rf "$tool-$version"
  )

  (
    # call wrapper to trigger install
    cd target/project
    expected_version=$(extract_version "$tool_wrapper_config")
    "./$tool_wrapper" --help
    # assert
    assert [ -x "$TOOL_USER_HOME/wrapper/dists/$tool-$expected_version"/*/"$tool-$expected_version/bin/$tool" ]
  )
}

assert() {
  if ! "$@"; then
    printf "assertion failed:"
    printf " %s" "$@"
    printf "\n"
    exit 1
  fi
}

get_version() {
  if [[ -z "$distributionUrl" ]]; then
    echo 1>&2 "distributionUrl not found in $tool_wrapper_config"
    exit 1
  fi
  [[ ${distributionUrl} =~ ^.*/(.*)/.*$ ]]
  printf "%s" "${BASH_REMATCH[1]}"
}

extract_version() {(
  # shellcheck source=.tool/wrapper/tool-wrapper.properties
  source "$1"
  get_version
)}

main() {
  mkdir -p target
  check_ends_with_newline "$tool_wrapper" "$tool_wrapper_config"
  generate_wrapper_up_script >"$tool_wrapper_up"
  run_tests
}

main
